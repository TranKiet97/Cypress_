{
  "stats": {
    "suites": 6,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-14T03:08:43.985Z",
    "end": "2022-12-14T03:09:02.067Z",
    "duration": 2431,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c32b520e-01ab-4e46-b277-ebc724fdbeea",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_002_GET_request_more.js",
      "file": "cypress\\api_test\\TC_002_GET_request_more.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "28940cb3-cc50-4eb1-ab8a-85683dec69a4",
          "title": "Test GET request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send GET request and verify the response",
              "fullTitle": "Test GET request Should be able to send GET request and verify the response",
              "timedOut": null,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  method: \"GET\"\n}).then(response => {\n  // Destructure\n  let {\n    status,\n    body\n  } = response;\n  expect(status).to.eq(200);\n  expect(body.length).to.eq(100); // Get a random element from array object\n  let randomIndex = Math.floor(Math.random() * body.length);\n  let randomObject = body[randomIndex]; // Verify the response\n  verifyNotEmpty('userID', randomObject.userId);\n  verifyNotEmpty('ID', randomObject.id);\n  verifyNotEmpty('title', randomObject.title);\n  verifyNotEmpty('body', randomObject.body);\n});",
              "err": {},
              "uuid": "0e7a6d96-ab70-44f3-aab1-0a38f4695d51",
              "parentUUID": "28940cb3-cc50-4eb1-ab8a-85683dec69a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e7a6d96-ab70-44f3-aab1-0a38f4695d51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4d640472-81b2-4650-a536-de50a85f7e7a",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_003_POST_request.js",
      "file": "cypress\\api_test\\TC_003_POST_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "934ced48-df8e-45b6-b9b2-ef099e76681a",
          "title": "Test POST request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send POST request and verify the response",
              "fullTitle": "Test POST request Should be able to send POST request and verify the response",
              "timedOut": null,
              "duration": 587,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = \"https://jsonplaceholder.typicode.com/posts\";\nlet header = {\n  \"Content-type\": \"application/json; charset=UTF-8\"\n};\nlet reqBody = {\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\nlet requestObject = {\n  method: \"POST\",\n  url: url,\n  headers: header,\n  body: reqBody\n};\ncy.request(requestObject).then(res => {\n  // cy.log(JSON.stringify(res.body));\n  let {\n    status\n  } = res;\n  let resBody = res.body;\n  expect(status).to.eq(201, \"Varifying Status\");\n  let {\n    userId,\n    title,\n    body\n  } = resBody;\n  expect(userId).to.eq(reqBody.userId, \"Verifying userId\");\n  expect(title).to.eq(reqBody.title, \"Verifying title\");\n  expect(body).to.eq(reqBody.body, \"Verifying body\");\n});",
              "err": {},
              "uuid": "9c215589-b95d-4b93-b2c3-cd9df093f502",
              "parentUUID": "934ced48-df8e-45b6-b9b2-ef099e76681a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c215589-b95d-4b93-b2c3-cd9df093f502"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 587,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "99954864-826c-439b-a4cd-9bfb3d9be2bf",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_004_PUT_request.js",
      "file": "cypress\\api_test\\TC_004_PUT_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56d0b9b7-6cfa-4b3d-b725-3685a87efee3",
          "title": "Test PUT request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send PUT request and verify the response",
              "fullTitle": "Test PUT request Should be able to send PUT request and verify the response",
              "timedOut": null,
              "duration": 655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = \"https://jsonplaceholder.typicode.com/posts/1\";\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet reqBody = {\n  id: 1,\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\ncy.request({\n  method: \"PUT\",\n  url: url,\n  headers: header,\n  body: reqBody\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  let {\n    status\n  } = res;\n  let resBody = res.body;\n  let {\n    userId,\n    title,\n    body,\n    id\n  } = resBody;\n  expect(status).to.eq(200, \"Verifying Status\");\n  expect(userId).to.eq(reqBody.userId, \"Verifying userId\");\n  expect(title).to.eq(reqBody.title, \"Verifying title\");\n  expect(body).to.eq(reqBody.body, \"Verifying body\");\n  expect(id).to.eq(reqBody.id, \"Verifying id\");\n});",
              "err": {},
              "uuid": "21088ba5-d7e7-44d7-a5f6-b1eb8c09972d",
              "parentUUID": "56d0b9b7-6cfa-4b3d-b725-3685a87efee3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "21088ba5-d7e7-44d7-a5f6-b1eb8c09972d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 655,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "be70f11b-1920-4a59-9042-c016640c3a1b",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_005_DELETE_request.js",
      "file": "cypress\\api_test\\TC_005_DELETE_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3bcb4f36-1eba-44fa-8ba8-4e65399f32ae",
          "title": "Testing DELETE Method",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send a DELETE request with Cypress",
              "fullTitle": "Testing DELETE Method Should be able to send a DELETE request with Cypress",
              "timedOut": null,
              "duration": 578,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"https://jsonplaceholder.typicode.com/posts/1\"\n}).then(res => {\n  expect(res.status).to.eq(200);\n});",
              "err": {},
              "uuid": "91ab7766-9226-4104-b407-4912e20a9180",
              "parentUUID": "3bcb4f36-1eba-44fa-8ba8-4e65399f32ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91ab7766-9226-4104-b407-4912e20a9180"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 578,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d0933ecb-5f9f-4eb0-b00a-7c8cab2f01e8",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_006_Handle_async.js",
      "file": "cypress\\api_test\\TC_006_Handle_async.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1d3f45c-04b8-4e07-b73a-e1b702806300",
          "title": "Handling async request in Cypress",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to wait until a request resolve",
              "fullTitle": "Handling async request in Cypress Should be able to wait until a request resolve",
              "timedOut": null,
              "duration": 54,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// // Also using for single request ------ async - await\n// let response = await cy.request({\n//     url: 'https://jsonplaceholder.typicode.com/posts',\n//     method: 'GET',\n// })\n// expect(response.status).to.eq(200);\n// expect(response.body.length).to.eq(100);\n// CRUD\n// let url = \"https://jsonplaceholder.typicode.com/posts\"\nlet url = Cypress.env(\"baseUrl\");\nlet header = {\n  \"Content-type\": \"application/json; charset=UTF-8\"\n};\nlet createdPostBody = {\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\nlet updatedPostBody = {\n  id: 1,\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\ncy.createPost(createdPostBody).then(res => {\n  cy.log(JSON.stringify(res.body));\n  cy.getPost((Number(res.body.id) - 1).toString()).then(res => {\n    cy.log(JSON.stringify(res.body));\n    cy.putPost(updatedPostBody, res.body.id).then(res => {\n      cy.log(JSON.stringify(res.body));\n      cy.deletePost(res.body.id).then(res => {\n        cy.log(JSON.stringify(res.body));\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "8aa2dd6c-418a-4938-8841-3998939f8c42",
              "parentUUID": "e1d3f45c-04b8-4e07-b73a-e1b702806300",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8aa2dd6c-418a-4938-8841-3998939f8c42"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "df324264-40c9-4457-a304-e77286922fc0",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_001_GET_request.js",
      "file": "cypress\\api_test\\TC_001_GET_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d45917a5-1ec3-4668-bb8d-0ac58c25047d",
          "title": "Test GET request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send GET request and verify the response",
              "fullTitle": "Test GET request Should be able to send GET request and verify the response",
              "timedOut": null,
              "duration": 418,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  method: 'GET'\n}).then(response => {\n  // cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.length).to.eq(100);\n});",
              "err": {},
              "uuid": "283bd30e-79be-4a1c-92cd-69ef0f9663a4",
              "parentUUID": "d45917a5-1ec3-4668-bb8d-0ac58c25047d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "283bd30e-79be-4a1c-92cd-69ef0f9663a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 418,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}