{
  "stats": {
    "suites": 6,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-13T10:29:37.330Z",
    "end": "2022-12-13T10:29:53.045Z",
    "duration": 2167,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3c3390f3-7c86-4768-ae1c-2b7f0ec334db",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_002_GET_request_more.js",
      "file": "cypress\\api_test\\TC_002_GET_request_more.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e4bffbc2-0063-4dd7-832e-8ec5a1d7a667",
          "title": "Test GET request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send GET request and verify the response",
              "fullTitle": "Test GET request Should be able to send GET request and verify the response",
              "timedOut": null,
              "duration": 109,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  method: \"GET\"\n}).then(response => {\n  // Destructure\n  let {\n    status,\n    body\n  } = response;\n  expect(status).to.eq(200);\n  expect(body.length).to.eq(100); // Get a random element from array object\n  let randomIndex = Math.floor(Math.random() * body.length);\n  let randomObject = body[randomIndex]; // Verify the response\n  verifyNotEmpty('userID', randomObject.userId);\n  verifyNotEmpty('ID', randomObject.id);\n  verifyNotEmpty('title', randomObject.title);\n  verifyNotEmpty('body', randomObject.body);\n});",
              "err": {},
              "uuid": "c8b048df-58f3-4d27-8078-a821325dbff4",
              "parentUUID": "e4bffbc2-0063-4dd7-832e-8ec5a1d7a667",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8b048df-58f3-4d27-8078-a821325dbff4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cf697704-0305-488c-8274-c3a7d2a460a8",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_003_POST_request.js",
      "file": "cypress\\api_test\\TC_003_POST_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1eb2bcc5-a3f7-4eff-ba91-9125bba82700",
          "title": "Test POST request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send POST request and verify the response",
              "fullTitle": "Test POST request Should be able to send POST request and verify the response",
              "timedOut": null,
              "duration": 580,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = \"https://jsonplaceholder.typicode.com/posts\";\nlet header = {\n  \"Content-type\": \"application/json; charset=UTF-8\"\n};\nlet reqBody = {\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\nlet requestObject = {\n  method: \"POST\",\n  url: url,\n  headers: header,\n  body: reqBody\n};\ncy.request(requestObject).then(res => {\n  // cy.log(JSON.stringify(res.body));\n  let {\n    status\n  } = res;\n  let resBody = res.body;\n  expect(status).to.eq(201, \"Varifying Status\");\n  let {\n    userId,\n    title,\n    body\n  } = resBody;\n  expect(userId).to.eq(reqBody.userId, \"Verifying userId\");\n  expect(title).to.eq(reqBody.title, \"Verifying title\");\n  expect(body).to.eq(reqBody.body, \"Verifying body\");\n});",
              "err": {},
              "uuid": "11b1fa66-239a-4ba0-a2dd-5f203d658a9c",
              "parentUUID": "1eb2bcc5-a3f7-4eff-ba91-9125bba82700",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11b1fa66-239a-4ba0-a2dd-5f203d658a9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 580,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bc624057-5326-48dc-aa47-ce758048e03a",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_004_PUT_request.js",
      "file": "cypress\\api_test\\TC_004_PUT_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "de459a1a-b572-495e-a3b9-d24843c95bad",
          "title": "Test PUT request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send PUT request and verify the response",
              "fullTitle": "Test PUT request Should be able to send PUT request and verify the response",
              "timedOut": null,
              "duration": 578,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let url = \"https://jsonplaceholder.typicode.com/posts/1\";\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet reqBody = {\n  id: 1,\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\ncy.request({\n  method: \"PUT\",\n  url: url,\n  headers: header,\n  body: reqBody\n}).then(res => {\n  cy.log(JSON.stringify(res.body));\n  let {\n    status\n  } = res;\n  let resBody = res.body;\n  let {\n    userId,\n    title,\n    body,\n    id\n  } = resBody;\n  expect(status).to.eq(200, \"Verifying Status\");\n  expect(userId).to.eq(reqBody.userId, \"Verifying userId\");\n  expect(title).to.eq(reqBody.title, \"Verifying title\");\n  expect(body).to.eq(reqBody.body, \"Verifying body\");\n  expect(id).to.eq(reqBody.id, \"Verifying id\");\n});",
              "err": {},
              "uuid": "b823a43f-186d-4875-8483-d0b75b5a93eb",
              "parentUUID": "de459a1a-b572-495e-a3b9-d24843c95bad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b823a43f-186d-4875-8483-d0b75b5a93eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 578,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "77f85181-bf4f-4017-8a3b-14e0c4d07840",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_005_DELETE_request.js",
      "file": "cypress\\api_test\\TC_005_DELETE_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2d819d1d-70b0-4744-b647-92886705363a",
          "title": "Testing DELETE Method",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send a DELETE request with Cypress",
              "fullTitle": "Testing DELETE Method Should be able to send a DELETE request with Cypress",
              "timedOut": null,
              "duration": 569,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"https://jsonplaceholder.typicode.com/posts/1\"\n}).then(res => {\n  expect(res.status).to.eq(200);\n});",
              "err": {},
              "uuid": "5ea8be24-7527-4475-bf52-cf10e2b21a9e",
              "parentUUID": "2d819d1d-70b0-4744-b647-92886705363a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ea8be24-7527-4475-bf52-cf10e2b21a9e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 569,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5ffc7fa2-0537-4ae3-9688-df8ee3b6b9b2",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_006_Handle_async.js",
      "file": "cypress\\api_test\\TC_006_Handle_async.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f6e1733f-b865-4a67-bec7-3d4e6a44ff94",
          "title": "Handling async request in Cypress",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to wait until a request resolve",
              "fullTitle": "Handling async request in Cypress Should be able to wait until a request resolve",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// // Also using for single request ------ async - await\n// let response = await cy.request({\n//     url: 'https://jsonplaceholder.typicode.com/posts',\n//     method: 'GET',\n// })\n// expect(response.status).to.eq(200);\n// expect(response.body.length).to.eq(100);\n// CRUD\n// let url = \"https://jsonplaceholder.typicode.com/posts\"\nlet url = Cypress.env(\"baseUrl\");\nlet header = {\n  \"Content-type\": \"application/json; charset=UTF-8\"\n};\nlet createdPostBody = {\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\nlet updatedPostBody = {\n  id: 1,\n  title: \"foo\",\n  body: \"bar\",\n  userId: 1\n};\ncy.createPost(createdPostBody).then(res => {\n  cy.log(JSON.stringify(res.body));\n  cy.getPost((Number(res.body.id) - 1).toString()).then(res => {\n    cy.log(JSON.stringify(res.body));\n    cy.putPost(updatedPostBody, res.body.id).then(res => {\n      cy.log(JSON.stringify(res.body));\n      cy.deletePost(res.body.id).then(res => {\n        cy.log(JSON.stringify(res.body));\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "7394e308-4190-4435-b922-9b61776590d6",
              "parentUUID": "f6e1733f-b865-4a67-bec7-3d4e6a44ff94",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7394e308-4190-4435-b922-9b61776590d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "77c4cfea-3058-4902-bffb-2f0b4fa51708",
      "title": "",
      "fullFile": "cypress\\api_test\\TC_001_GET_request.js",
      "file": "cypress\\api_test\\TC_001_GET_request.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "caf47f8b-76ba-429e-9707-c275acc49dbf",
          "title": "Test GET request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send GET request and verify the response",
              "fullTitle": "Test GET request Should be able to send GET request and verify the response",
              "timedOut": null,
              "duration": 305,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  method: 'GET'\n}).then(response => {\n  // cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.body.length).to.eq(100);\n});",
              "err": {},
              "uuid": "39fd1f20-aa89-4148-8c74-b1189ac28608",
              "parentUUID": "caf47f8b-76ba-429e-9707-c275acc49dbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39fd1f20-aa89-4148-8c74-b1189ac28608"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 305,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}